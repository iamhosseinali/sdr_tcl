-- Generated by sine_wave_generator.c
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Sine_Wave is
generic (
    IP_INPUT_FREQUENCY         : integer := 100000000; --- in Hz
    OUTPUT_SIGNAL_FREQUENCY    : integer := 50;        --- in Hz, max = M_AXIS_ACLK/256, if you need more, make MAX_OUTPUT_SIGNAL_FRQ true
    MAX_OUTPUT_SIGNAL_FRQ      : boolean := false      --- true this if you need more than M_AXIS_ACLK/256 then you can achieve M_AXIS_ACLK/128
);
Port (
    M_AXIS_ACLK    : in STD_LOGIC;
    M_AXIS_ARESETN : in STD_LOGIC;   --- negative asynch reset
    M_AXIS_tDATA   : out std_logic_vector(11 downto 0);
    M_AXIS_tVALID  : out std_logic
);
end Sine_Wave;

architecture Behavioral of Sine_Wave is

constant SIN_TABLE_Length          : integer := 128;
constant SIN_DATA_WIDTH            : integer := 12;
type SIN_TABLEType is array(0 to SIN_TABLE_Length-1) of integer;
constant SIN_TABLE : SIN_TABLEType :=(0,100,200,300,399,497,594,689,783,875,965,1052,1137,1219,1299,1375,1448,1517,1583,1644,1702,1756,1806,1851,1892,1928,1959,1986,2008,2025,2038,2045,2047,2045,2038,2025,2008,1986,1959,1928,1892,1851,1806,1756,1702,1644,1583,1517,1448,1375,1299,1219,1137,1052,965,875,783,689,594,497,399,300,200,100,0,-100,-200,-300,-399,-497,-594,-689,-783,-875,-965,-1052,-1137,-1219,-1299,-1375,-1448,-1517,-1583,-1644,-1702,-1756,-1806,-1851,-1892,-1928,-1959,-1986,-2008,-2025,-2038,-2045,-2047,-2045,-2038,-2025,-2008,-1986,-1959,-1928,-1892,-1851,-1806,-1756,-1702,-1644,-1583,-1517,-1448,-1375,-1299,-1219,-1137,-1052,-965,-875,-783,-689,-594,-497,-399,-300,-200,-100);
signal indx_cycle                  : integer := IP_INPUT_FREQUENCY/OUTPUT_SIGNAL_FREQUENCY/SIN_TABLE_Length;
signal sin_indx                    : unsigned(6 downto 0) := (others=>'0');
signal cnt                         : unsigned(31 downto 0) := (others=>'0');

begin
indx_cycle  <= 0 when MAX_OUTPUT_SIGNAL_FRQ=true;
process(M_AXIS_ACLK)
begin
    if rising_edge(M_AXIS_ACLK) then
       if (M_AXIS_ARESETN='0') then    --- Asynch reset
           cnt             <= (others=>'0');
           sin_indx        <= (others=>'0');
           M_AXIS_tVALID   <= '0';
       else
           cnt             <= cnt+1;
           M_AXIS_tVALID   <= '0';
           if(cnt=indx_cycle)then
               cnt        <= (others=>'0');
               sin_indx   <= sin_indx+1;
               if(sin_indx=SIN_TABLE_Length-1) then
                   sin_indx       <= (others=>'0');
               end if;
               M_AXIS_tVALID  <= '1';
               M_AXIS_tDATA   <= std_logic_vector(to_signed(SIN_TABLE(to_integer(sin_indx)),SIN_DATA_WIDTH));
           end if;
       end if;
    end if;
end process;
end Behavioral;
